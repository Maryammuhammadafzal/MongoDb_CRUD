<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Employees</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <div
      class="d-flex justify-content-center"
      style="
        height: auto;
        width: auto;
        padding: 1rem;
        flex-direction: column;
        align-items: center;
        flex-wrap: wrap;
        width: 100%;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      "
    >
      <h1 class="text-center mb-5">Employees Data</h1>
      <div class="container flex row gap-3 justify-content-center">
        <% if (employees.length === 0) { %>
        <p style="text-align: center; font-size: larger; color: red">
          Employee not found!
        </p>
        <% } else { %> <% employees.forEach((employee) => { %>
        <div
          class="card"
          style="
            width: 25rem;
            box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.1);
            background-color: rgb(246, 246, 246);
          "
        >
          <div class="card-body">
            <div
              class="image"
              style="
                width: 100%;
                height: 100px;
                display: flex;
                align-items: center;
              "
            >
              <img
                style="height: 100px; width: 100px; border-radius: 1rem"
                src="/uploads/<%= employee.profileImage %>"
                alt="image"
              />
            </div>
            <h5 class="card-title fs-3 my-3">
              <%= employee.firstName + " " + employee.lastName %>
            </h5>
            <p
              class="card-text border-bottom py-1 border-dark"
              style="font-size: smaller"
            >
              <%= employee.firstName + " " + employee.lastName + " drives the "
              + employee.department + " strategy of the " + employee.company %>
            </p>
          </div>
          <li class="list-group-item px-3 py-1" style="font-size: 1rem">
            <span class="fw-bold">Email :</span> <%= employee.email %>
          </li>
          <li class="list-group-item px-3 py-1" style="font-size: 1rem">
            <span class="fw-bold">Company : </span> <%= employee.company %>
          </li>
          <li class="list-group-item px-3 py-1" style="font-size: 1rem">
            <span class="fw-bold">Department :</span> <%= employee.department %>
          </li>
          <!-- <ul class="list-group list-group-light list-group-small">
          </ul> -->
          <div class="card-body">
            <button
              data-mdb-ripple-init
              style="align-self: center"
              class="btn btn-secondary btn-block"
              id="edit"
              data-id="<%= employee._id %>"
              data-name="<%= employee.firstName %>"
              data-lastname="<%= employee.lastName %>"
              data-email="<%= employee.email %>"
              data-company="<%= employee.company %>"
              data-address="<%= employee.address %>"
              data-department="<%= employee.department %>"
              onclick="editFunction(event)"
            >
              Edit
            </button>
            <button
              data-mdb-ripple-init
              style="align-self: center"
              class="btn btn-danger btn-block"
              id="delete"
              data-id="<%= employee._id %>"
              data-name="<%= employee.firstName %>"
              data-email="<%= employee.email %>"
              onclick="deleteFunction(event)"
            >
              Delete
            </button>

            <!-- <button
              id="edit"
              data-id="<%= employee._id %>"
              data-name="<%= employee.firstName %>"
              data-lastname="<%= employee.lastName %>"
              data-email="<%= employee.email %>"
              data-company="<%= employee.company %>"
              data-address="<%= employee.address %>"
              data-department="<%= employee.department %>"
              onclick="editFunction(event)"
            >
              Edit
            </button>
            <button
              id="delete"
              data-id="<%= employee._id %>"
              data-name="<%= employee.firstName %>"
              data-email="<%= employee.email %>"
              onclick="deleteFunction(event)"
            >
              Delete
            </button> -->
          </div>
        </div>
        <% }); %> <% } %>
      </div>
      <div class="w-100 d-flex mt-5 gap-3 justify-content-center">
        <button
          data-mdb-ripple-init
          id="addMore"
          style="align-self: center; font-size: large"
          class="btn btn-secondary btn-block px-4 py-3 mb-4"
        >
          Add More
        </button>
        <button
          data-mdb-ripple-init
          id="deleteAll"
          style="align-self: center; font-size: large"
          class="btn btn-danger btn-block px-4 py-3 mb-4"
        >
          Delete All
        </button>
  
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      const addMore = document.getElementById("addMore");
      const deleteAll = document.getElementById("deleteAll");
      const editBtn = document.getElementById("edit");
      const deleteBtn = document.getElementById("delete");

      addMore.addEventListener("click", async () => {
        window.location.href = "/";
      });

      const editFunction = async (event) => {
        try {
          let employeeId = event.target.dataset.id; 
          let employeeName = event.target.dataset.name; 
          let employeeLastName = event.target.dataset.lastname;
          let employeeEmail = event.target.dataset.email; 
          let employeeCompany = event.target.dataset.company; 
          let employeeAddress = event.target.dataset.address; 
          let employeeDepartment = event.target.dataset.department; 

          // Fetch employee details
          let response = await fetch(`/employee/${employeeId}`);
          let employee = await response.json();

          Swal.fire({
            title: "Edit Employee",
            html: `
            <input id="swal-name" class="swal2-input" value="${
              employeeName + " " + employeeLastName
            }">
            <input id="swal-email" class="swal2-input" value="${employeeEmail}">
            <input id="swal-company" class="swal2-input" value="${employeeCompany}">
            <input id="swal-address" class="swal2-input" value="${employeeAddress}">
            <input id="swal-department" class="swal2-input" value="${employeeDepartment}">
        `,
            showCancelButton: true,
            confirmButtonText: "Save",
            preConfirm: () => {
              // Get input values
              let firstName = document.getElementById("swal-name").value.trim();
              let email = document.getElementById("swal-email").value.trim();
              let company = document
                .getElementById("swal-company")
                .value.trim();
              let address = document
                .getElementById("swal-address")
                .value.trim();
              let department = document
                .getElementById("swal-department")
                .value.trim();

              // Validation: Check if any field is empty
              if (!firstName || !email || !company || !address || !department) {
                Swal.showValidationMessage("⚠️ All input fields are required!");
                return false;
              }

              return { firstName, email, company, address, department };
            },
          }).then(async (result) => {
            if (result.isConfirmed) {
              let updatedEmployee = result.value;

              let response = await fetch(`/edit/${employeeId}`, {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(updatedEmployee),
              });
              let resData = await response.json();

              if (resData.success) {
                Swal.fire({
                  position: "top-end",
                  icon: "success",
                  title: "Your work has been saved",
                  showConfirmButton: false,
                  timer: 1500,
                }).then(() => {
                  window.location.reload();
                });
              } else {
                Swal.fire({
                  position: "top-end",
                  icon: "error",
                  title: "Your work has not been updated",
                  showConfirmButton: false,
                  timer: 1500,
                });
              }
            }
          });
        } catch (error) {
          Swal.fire({
            position: "top-end",
            icon: "error",
            title: "Oops...",
            text: `Update Error: ${error.message}`,
            showConfirmButton: false,
            timer: 1500,
          });
        }
      };

      const deleteFunction = async (event) => {
        try {
          let employeeId = event.target.dataset.id; 
          let employeeName = event.target.dataset.name; 
          let employeeEmail = event.target.dataset.email; 
          console.log(employeeId);

          if (!employeeId) {
            Swal.fire({
              position: "top-end",
              icon: "error",
              title: "Oops...",
              text: "Error: Employee ID not found!",
              showConfirmButton: false,
              timer: 1500,
            });
            return;
          }

          const confirmDeleted = await Swal.fire({
            title: "Are you sure?",
            text: "You want to delete the employee!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, delete it!",
          });
          if (!confirmDeleted.isConfirmed) {
            return;
          }

          let response = await fetch("/delete", {
            method: "Delete",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              email: employeeEmail,
            }),
          });

          let result = await response.json();

          if (result.success) {
            Swal.fire({
              position: "top-end",
              icon: "success",
              title: `${employeeName} Deleted Successfully`,
              showConfirmButton: false,
              timer: 1500,
            });

            setTimeout(() => {
              window.location.reload(); // Refresh the page after deletion
            }, 1600);
          } else {
            Swal.fire({
              position: "top-end",
              icon: "error",
              title: "Oops...",
              text: `User not deleted ${result.name} , ${result.email}`,
              showConfirmButton: false,
              timer: 1500,
            });
          }
        } catch (error) {
          Swal.fire({
            position: "top-end",
            icon: "error",
            title: "Oops...",
            text: error.message,
            showConfirmButton: false,
            timer: 1500,
          });
        }
      };

      deleteAll.addEventListener("click", async () => {
        const response = await fetch("/deleteAll", {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
        });
        let result = await response.json();
        if (result.success) {
          Swal.fire({
            position: "top-end",
            icon: "success",
            title: `All User Deleted Successfully`,
            showConfirmButton: false,
            timer: 1500,
          });
          window.location.href = "/";
        } else {
          Swal.fire({
            position: "top-end",
            icon: "error",
            title: "Oops...",
            text: `User not deleted`,
            showConfirmButton: false,
            timer: 1500,
          });
        }
      });
    </script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
