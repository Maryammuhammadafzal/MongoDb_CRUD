<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Employees</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <div
      class="d-flex justify-content-center " 
      style="
        height: auto;
        width: auto;
        padding: 1rem;
        flex-direction: column;
        align-items: center;
        flex-wrap: wrap;
        width: 100%;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      "
    >
      <h1 class="text-center mb-5">Employees Data</h1>
      <div class="container flex row gap-3 justify-content-center">
        <% employees.forEach((employee) => { %>
        <div
          class="card"
          style="
            width: 25rem;
            box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.1);
            background-color: rgb(246, 246, 246);
          "
        >
          <div class="card-body">
            <h5 class="card-title fs-3 my-3">
              <%= employee.firstName + " " + employee.lastName %>
            </h5>
            <p class="card-text border-bottom py-1 border-dark" style="font-size: smaller;">
              <%= employee.firstName + " " + employee.lastName + " drives the " + employee.department + " strategy of the " + employee.company %>

            </p>
          </div>
          <li class="list-group-item px-3 py-1" style="font-size: 1rem;"> <span class="fw-bold">Email :</span> <%= employee.email %></li>
          <li class="list-group-item px-3 py-1" style="font-size: 1rem;"> <span class="fw-bold">Company : </span> <%= employee.company %></li>
          <li class="list-group-item px-3 py-1" style="font-size: 1rem;"> <span class="fw-bold">Department :</span> <%= employee.department %></li>
          <!-- <ul class="list-group list-group-light list-group-small">
          </ul> -->
          <div class="card-body">
            <button
              data-mdb-ripple-init
              style="align-self: center"
              class="btn btn-secondary btn-block"
              id="edit"
              data-id="<%= employee._id %>"
              data-name="<%= employee.firstName %>"
              data-lastname="<%= employee.lastName %>"
              data-email="<%= employee.email %>"
              data-company="<%= employee.company %>"
              data-address="<%= employee.address %>"
              data-department="<%= employee.department %>"
              onclick="editFunction(event)"
            >
              Edit
            </button>
            <button
              data-mdb-ripple-init
              style="align-self: center"
              class="btn btn-danger btn-block"
              id="delete"
              data-id="<%= employee._id %>"
              data-name="<%= employee.firstName %>"
              data-email="<%= employee.email %>"
              onclick="deleteFunction(event)"
            >
              Delete
            </button>

            <!-- <button
              id="edit"
              data-id="<%= employee._id %>"
              data-name="<%= employee.firstName %>"
              data-lastname="<%= employee.lastName %>"
              data-email="<%= employee.email %>"
              data-company="<%= employee.company %>"
              data-address="<%= employee.address %>"
              data-department="<%= employee.department %>"
              onclick="editFunction(event)"
            >
              Edit
            </button>
            <button
              id="delete"
              data-id="<%= employee._id %>"
              data-name="<%= employee.firstName %>"
              data-email="<%= employee.email %>"
              onclick="deleteFunction(event)"
            >
              Delete
            </button> -->
          </div>
        </div>
        <% }); %>
      </div>
      <div class="w-100 d-flex mt-5 gap-3 justify-content-center">
        <button
          data-mdb-ripple-init
          id="addMore"
          style="align-self:center; font-size: large; "
          class="btn btn-secondary btn-block px-4 py-3 mb-4"
        >
          Add More
        </button>
        <button
          data-mdb-ripple-init
          id="deleteAll"
          style="align-self:center; font-size: large; "
          class="btn btn-danger btn-block px-4 py-3 mb-4"
        >
          Delete All
        </button>
        <!-- <button class="w-40 py-2 bg-secondary" >Add More</button>
        <button class="w-40 py-2 bg-danger" id="deleteAll">Delete All</button> -->
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      const addMore = document.getElementById("addMore");
      const deleteAll = document.getElementById("deleteAll");
      const editBtn = document.getElementById("edit");
      const deleteBtn = document.getElementById("delete");

      addMore.addEventListener("click", async () => {
        window.location.href = "/";
      });

      const editFunction = async (event) => {
        try {
          let employeeId = event.target.dataset.id; // Get name if available
          let employeeName = event.target.dataset.name; // Get name if available
          let employeeLastName = event.target.dataset.lastname;
          let employeeEmail = event.target.dataset.email; // Get email if available
          let employeeCompany = event.target.dataset.company; // Get email if available
          let employeeAddress = event.target.dataset.address; // Get email if available
          let employeeDepartment = event.target.dataset.department; // Get email if available

          // Fetch employee details
          let response = await fetch(`/employee/${employeeId}`);
          let employee = await response.json();

          Swal.fire({
            title: "Edit Employee",
            html: `
            <input id="swal-name" class="swal2-input" value="${
              employeeName + " " + employeeLastName
            }">
            <input id="swal-email" class="swal2-input" value="${employeeEmail}">
            <input id="swal-company" class="swal2-input" value="${employeeCompany}">
            <input id="swal-address" class="swal2-input" value="${employeeAddress}">
            <input id="swal-department" class="swal2-input" value="${employeeDepartment}">
        `,
            showCancelButton: true,
            confirmButtonText: "Save",
          }).then(async (result) => {
            if (result.isConfirmed) {
              let updatedEmployee = {
                firstName: document.getElementById("swal-name").value,
                email: document.getElementById("swal-email").value,
                company: document.getElementById("swal-company").value,
                address: document.getElementById("swal-address").value,
                department: document.getElementById("swal-department").value,
              };
              console.log(updatedEmployee);

              let response = await fetch(`/edit/${employeeId}`, {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(updatedEmployee),
              });
              let result = await response.json();

              if (result.success) {
                Swal.fire({
                  position: "top-end",
                  icon: "success",
                  title: "Your work has been saved",
                  showConfirmButton: false,
                  timer: 1500,
                }).then(() => {
                  window.location.reload();
                });
              } else {
                Swal.fire({
                  position: "top-end",
                  icon: "error",
                  title: "Your work has not been updated",
                  showConfirmButton: false,
                  timer: 1500,
                });
              }
            }
          });
        } catch (error) {
          console.log("Update Error", error);
        }
      };

      const deleteFunction = async (event) => {
        try {
          let employeeId = event.target.dataset.id; // Get name if available
          let employeeName = event.target.dataset.name; // Get name if available
          let employeeEmail = event.target.dataset.email; // Get email if available
          console.log(employeeId);

          if (!employeeId) {
            alert("Error: Employee ID not found!");
            return;
          }

          let confirmDelete = confirm(
            `Are you sure you want to delete ${employeeName}?`
          );
          if (!confirmDelete) return;

          let response = await fetch("/delete", {
            method: "Delete",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              email: employeeEmail,
            }),
          });

          let result = await response.json();

          if (result.success) {
            alert(`${employeeName} Deleted Successfully`);
            window.location.reload();
          } else {
            alert(`User not deleted ${result.name} , ${result.email}`);
          }
        } catch (error) {
          alert("Error deleting user: " + error);
        }
      };

      deleteAll.addEventListener("click", async () => {
        const response = await fetch("/deleteAll", {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
        });

        window.location.href = "/";
      });
    </script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
